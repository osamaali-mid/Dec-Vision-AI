{
  "version": 3,
  "sources": ["../../src/lib/file-manager.ts"],
  "sourcesContent": ["import * as fs from 'fs';\nimport * as path from 'path';\nimport { EventEmitter } from 'events';\n\nexport interface FileUploadResult {\n    success: boolean;\n    filePath?: string;\n    error?: string;\n    fileInfo?: {\n        name: string;\n        size: number;\n        type: string;\n        uploadedAt: Date;\n    };\n}\n\nexport class FileManager extends EventEmitter {\n    private uploadDir: string;\n    private maxFileSize: number; // in bytes\n    private allowedExtensions: string[];\n\n    constructor(uploadDir: string = './uploads', maxFileSize: number = 100 * 1024 * 1024) {\n        super();\n        this.uploadDir = uploadDir;\n        this.maxFileSize = maxFileSize;\n        this.allowedExtensions = [\n            '.jpg', '.jpeg', '.png', '.bmp', '.tiff', // Images\n            '.mp4', '.avi', '.mov', '.mkv', '.webm'   // Videos\n        ];\n        \n        this.ensureUploadDirectory();\n    }\n\n    /**\n     * Save uploaded file\n     */\n    async saveFile(fileName: string, fileBuffer: Buffer): Promise<FileUploadResult> {\n        try {\n            const fileExtension = path.extname(fileName).toLowerCase();\n            \n            // Validate file extension\n            if (!this.allowedExtensions.includes(fileExtension)) {\n                return {\n                    success: false,\n                    error: `File type not allowed. Supported formats: ${this.allowedExtensions.join(', ')}`\n                };\n            }\n\n            // Validate file size\n            if (fileBuffer.length > this.maxFileSize) {\n                return {\n                    success: false,\n                    error: `File size exceeds limit of ${this.maxFileSize / (1024 * 1024)}MB`\n                };\n            }\n\n            // Generate unique filename\n            const timestamp = Date.now();\n            const uniqueFileName = `${timestamp}_${fileName}`;\n            const filePath = path.join(this.uploadDir, uniqueFileName);\n\n            // Save file\n            await fs.promises.writeFile(filePath, fileBuffer);\n\n            const fileInfo = {\n                name: fileName,\n                size: fileBuffer.length,\n                type: this.getFileType(fileExtension),\n                uploadedAt: new Date()\n            };\n\n            this.emit('fileUploaded', { filePath, fileInfo });\n\n            return {\n                success: true,\n                filePath,\n                fileInfo\n            };\n\n        } catch (error) {\n            return {\n                success: false,\n                error: `Failed to save file: ${error instanceof Error ? error.message : 'Unknown error'}`\n            };\n        }\n    }\n\n    /**\n     * Get list of uploaded files\n     */\n    async getUploadedFiles(): Promise<Array<{\n        name: string;\n        path: string;\n        size: number;\n        type: string;\n        uploadedAt: Date;\n    }>> {\n        try {\n            const files = await fs.promises.readdir(this.uploadDir);\n            const fileList = [];\n\n            for (const file of files) {\n                const filePath = path.join(this.uploadDir, file);\n                const stats = await fs.promises.stat(filePath);\n                \n                if (stats.isFile()) {\n                    const fileExtension = path.extname(file).toLowerCase();\n                    \n                    fileList.push({\n                        name: file,\n                        path: filePath,\n                        size: stats.size,\n                        type: this.getFileType(fileExtension),\n                        uploadedAt: stats.mtime\n                    });\n                }\n            }\n\n            return fileList.sort((a, b) => b.uploadedAt.getTime() - a.uploadedAt.getTime());\n        } catch (error) {\n            this.emit('error', error);\n            return [];\n        }\n    }\n\n    /**\n     * Delete uploaded file\n     */\n    async deleteFile(fileName: string): Promise<boolean> {\n        try {\n            const filePath = path.join(this.uploadDir, fileName);\n            \n            if (fs.existsSync(filePath)) {\n                await fs.promises.unlink(filePath);\n                this.emit('fileDeleted', { fileName, filePath });\n                return true;\n            }\n            \n            return false;\n        } catch (error) {\n            this.emit('error', error);\n            return false;\n        }\n    }\n\n    /**\n     * Clean up old files (older than specified days)\n     */\n    async cleanupOldFiles(daysOld: number = 7): Promise<number> {\n        try {\n            const files = await fs.promises.readdir(this.uploadDir);\n            const cutoffDate = new Date();\n            cutoffDate.setDate(cutoffDate.getDate() - daysOld);\n            \n            let deletedCount = 0;\n\n            for (const file of files) {\n                const filePath = path.join(this.uploadDir, file);\n                const stats = await fs.promises.stat(filePath);\n                \n                if (stats.isFile() && stats.mtime < cutoffDate) {\n                    await fs.promises.unlink(filePath);\n                    deletedCount++;\n                    this.emit('fileDeleted', { fileName: file, filePath, reason: 'cleanup' });\n                }\n            }\n\n            this.emit('cleanupComplete', { deletedCount, daysOld });\n            return deletedCount;\n        } catch (error) {\n            this.emit('error', error);\n            return 0;\n        }\n    }\n\n    /**\n     * Get file type from extension\n     */\n    private getFileType(extension: string): string {\n        const imageExtensions = ['.jpg', '.jpeg', '.png', '.bmp', '.tiff'];\n        const videoExtensions = ['.mp4', '.avi', '.mov', '.mkv', '.webm'];\n\n        if (imageExtensions.includes(extension)) {\n            return 'image';\n        } else if (videoExtensions.includes(extension)) {\n            return 'video';\n        }\n        \n        return 'unknown';\n    }\n\n    /**\n     * Ensure upload directory exists\n     */\n    private ensureUploadDirectory(): void {\n        if (!fs.existsSync(this.uploadDir)) {\n            fs.mkdirSync(this.uploadDir, { recursive: true });\n        }\n    }\n\n    /**\n     * Get upload directory path\n     */\n    getUploadDirectory(): string {\n        return this.uploadDir;\n    }\n\n    /**\n     * Update configuration\n     */\n    updateConfig(config: {\n        uploadDir?: string;\n        maxFileSize?: number;\n        allowedExtensions?: string[];\n    }): void {\n        if (config.uploadDir) {\n            this.uploadDir = config.uploadDir;\n            this.ensureUploadDirectory();\n        }\n        \n        if (config.maxFileSize) {\n            this.maxFileSize = config.maxFileSize;\n        }\n        \n        if (config.allowedExtensions) {\n            this.allowedExtensions = config.allowedExtensions;\n        }\n\n        this.emit('configUpdated', {\n            uploadDir: this.uploadDir,\n            maxFileSize: this.maxFileSize,\n            allowedExtensions: this.allowedExtensions\n        });\n    }\n}"],
  "mappings": "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",
  "names": []
}
