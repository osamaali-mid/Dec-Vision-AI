{
  "version": 3,
  "sources": ["../src/main.ts"],
  "sourcesContent": ["/*\n * Created with @iobroker/create-adapter v2.2.1\n */\n\n// The adapter-core module gives you access to the core ioBroker functions\n// you need to create an adapter\nimport * as utils from '@iobroker/adapter-core';\nconst axios = require(\"axios\").default;\nconst https = require(\"https\");\n\n// Load your modules here, e.g.:\n// import * as fs from \"fs\";\n\n\n\nclass Reolink810a extends utils.Adapter {\n\n    \n    public reolinkApiClient : any = null;\n    private apiConnected    : boolean = false;\n\n\tpublic constructor(options: Partial<utils.AdapterOptions> = {}) {\n\t\tsuper({\n\t\t\t...options,\n\t\t\tname: 'reolink-810a',\n\t\t});\n\n\n\t\tthis.on('ready', this.onReady.bind(this));\n\t\tthis.on('stateChange', this.onStateChange.bind(this));\n\t\t// this.on('objectChange', this.onObjectChange.bind(this));\n\t\t// this.on('message', this.onMessage.bind(this));\n\t\tthis.on('unload', this.onUnload.bind(this));\n\t}\n    \n    \n    \n\n\t/**\n\t * Is called when databases are connected and adapter received configuration.\n\t */\n\tprivate async onReady(): Promise<void> {\n\t\t// Initialize your adapter here\n\n\t\t// Reset the connection indicator during startup\n\t\tthis.setState('info.connection', false, true);\n\n\n\n        if (!this.config.Hostname) {\n\t\t\tthis.log.error(\"Hostname not (yet )set - please check Settings!\");\n\t\t\treturn;\n\t\t}\n\n        if (!this.config.Username) {\n\t\t\tthis.log.error(\"Username not (yet )set - please check Settings!\");\n\t\t\treturn;\n\t\t}\n\n        if (!this.config.Password) {\n\t\t\tthis.log.error(\"Password not (yet )set - please check Settings!\");\n\t\t\treturn;\n\t\t}\n\n        if (!this.config.apiRefreshInterval) {\n\t\t\tthis.log.error(\"apiRefreshInterval not (yet )set - please check Settings!\");\n\t\t\treturn;\n\t\t}\n\n        this.reolinkApiClient = axios.create({\n\t\t\tbaseURL: `https://${this.config.Hostname}`,\n\t\t\ttimeout: 4000,\n\t\t\tresponseType: \"json\",\n\t\t\tresponseEncoding: \"binary\",\n\t\t\thttpsAgent: new https.Agent({\n\t\t\t\trejectUnauthorized: false,\n\t\t\t}),\n\t\t});\n\n        this.getDevinfo();\n\n\n\n\n        \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n        \n\t\t// The adapters config (in the instance object everything under the attribute \"native\") is accessible via\n\t\t// this.config:\n\t\t// this.log.info('config option1: ' + this.config.option1);\n\t\t// this.log.info('config option2: ' + this.config.option2);\n\n\t\t/*\n\t\tFor every state in the system there has to be also an object of type state\n\t\tHere a simple template for a boolean variable named \"testVariable\"\n\t\tBecause every adapter instance uses its own unique namespace variable names can't collide with other adapters variables\n\t\t*/\n        /*\n\t\tawait this.setObjectNotExistsAsync('testVariable', {\n\t\t\ttype: 'state',\n\t\t\tcommon: {\n\t\t\t\tname: 'testVariable',\n\t\t\t\ttype: 'boolean',\n\t\t\t\trole: 'indicator',\n\t\t\t\tread: true,\n\t\t\t\twrite: true,\n\t\t\t},\n\t\t\tnative: {},\n\t\t});\n        */\n\n\t\t// In order to get state updates, you need to subscribe to them. The following line adds a subscription for our variable we have created above.\n\t\t// this.subscribeStates('testVariable');\n\t\t// You can also add a subscription for multiple states. The following line watches all states starting with \"lights.\"\n\t\t// this.subscribeStates('lights.*');\n\t\t// Or, if you really must, you can also watch all states. Don't do this if you don't need to. Otherwise this will cause a lot of unnecessary load on the system:\n\t\t// this.subscribeStates('*');\n\n\t\t/*\n\t\t\tsetState examples\n\t\t\tyou will notice that each setState will cause the stateChange event to fire (because of above subscribeStates cmd)\n\t\t*/\n\t\t// the variable testVariable is set to true as command (ack=false)\n\t\t// await this.setStateAsync('testVariable', true);\n\n\t\t// same thing, but the value is flagged \"ack\"\n\t\t// ack should be always set to true if the value is received from or acknowledged from the target system\n\t\t// await this.setStateAsync('testVariable', { val: true, ack: true });\n\n\t\t// same thing, but the state is deleted after 30s (getState will return null afterwards)\n\t\t// await this.setStateAsync('testVariable', { val: true, ack: true, expire: 30 });\n\n\t\t// examples for the checkPassword/checkGroup functions\n\t\t// let result = await this.checkPasswordAsync('admin', 'iobroker');\n\t\t// this.log.info('check user admin pw iobroker: ' + result);\n\n\t\t// result = await this.checkGroupAsync('admin', 'admin');\n\t\t// this.log.info('check group user admin group admin: ' + result);\n\t}\n\n\n    private async getDevinfo() {\n\n        if (this.reolinkApiClient) {\n\n\n            this.log.debug('getDevinfo() was called');\n\n\n\n            try {\n                const DevInfoValues = await this.reolinkApiClient.get(`/api.cgi?cmd=GetDevInfo&channel=0&user=${this.config.Username}&password=${this.config.Password}`);\n                this.log.debug(`camMdStateInfo ${JSON.stringify(DevInfoValues.status)}: ${JSON.stringify(DevInfoValues.data)}`);\n\n                if(DevInfoValues.status === 200)\n                {\n                    await this.setStateAsync('info.connection', { ack: true, val: true });\n                    this.apiConnected = true;\n                    await this.setStateAsync(\"Network.Connected\", {val: this.apiConnected, ack: true});\n                    const DevValues = DevInfoValues.data[0];\n\n                    // /*\n                    await this.setStateAsync(\"Device.BuildDay\", {val: DevValues.value.DevInfo.buildDay, ack: true});\n                    await this.setStateAsync(\"Device.CfgVer\", {val: DevValues.value.DevInfo.cfgVer, ack: true});\n                    await this.setStateAsync(\"Device.Detail\", {val: DevValues.value.DevInfo.detail, ack: true});\n                    await this.setStateAsync(\"Device.DiskNum\", {val: DevValues.value.DevInfo.diskNum, ack: true});\n                    await this.setStateAsync(\"Device.FirmVer\", {val: DevValues.value.DevInfo.firmVer, ack: true});\n                    await this.setStateAsync(\"Device.Model\", {val: DevValues.value.DevInfo.model, ack: true});\n                    await this.setStateAsync(\"Device.Name\", {val: DevValues.value.DevInfo.name, ack: true});\n                    await this.setStateAsync(\"Device.Serial\", {val: DevValues.value.DevInfo.serial, ack: true});\n                    await this.setStateAsync(\"Device.Wifi\", {val: DevValues.value.DevInfo.wifi, ack: true});\n                    // */\n                    \n                }\n\n            } catch (error:any) {\n                this.apiConnected = false;\n                await this.setStateAsync(\"Network.Connected\", {val: this.apiConnected, ack: true});\n\n\n                this.log.error(error);\n            }\n        }\n    }\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\t/**\n\t * Is called when adapter shuts down - callback has to be called under any circumstances!\n\t */\n\tprivate onUnload(callback: () => void): void {\n\t\ttry {\n\t\t\t// Here you must clear all timeouts or intervals that may still be active\n\t\t\t// clearTimeout(timeout1);\n\t\t\t// clearTimeout(timeout2);\n\t\t\t// ...\n\t\t\t// clearInterval(interval1);\n\n\t\t\tcallback();\n\t\t} catch (e) {\n\t\t\tcallback();\n\t\t}\n\t}\n\n\t// If you need to react to object changes, uncomment the following block and the corresponding line in the constructor.\n\t// You also need to subscribe to the objects with `this.subscribeObjects`, similar to `this.subscribeStates`.\n\t// /**\n\t//  * Is called if a subscribed object changes\n\t//  */\n\t// private onObjectChange(id: string, obj: ioBroker.Object | null | undefined): void {\n\t// \tif (obj) {\n\t// \t\t// The object was changed\n\t// \t\tthis.log.info(`object ${id} changed: ${JSON.stringify(obj)}`);\n\t// \t} else {\n\t// \t\t// The object was deleted\n\t// \t\tthis.log.info(`object ${id} deleted`);\n\t// \t}\n\t// }\n\n\t/**\n\t * Is called if a subscribed state changes\n\t */\n\tprivate onStateChange(id: string, state: ioBroker.State | null | undefined): void {\n\t\tif (state) {\n\t\t\t// The state was changed\n\t\t\tthis.log.info(`state ${id} changed: ${state.val} (ack = ${state.ack})`);\n\t\t} else {\n\t\t\t// The state was deleted\n\t\t\tthis.log.info(`state ${id} deleted`);\n\t\t}\n\t}\n\n\t// If you need to accept messages in your adapter, uncomment the following block and the corresponding line in the constructor.\n\t// /**\n\t//  * Some message was sent to this instance over message box. Used by email, pushover, text2speech, ...\n\t//  * Using this method requires \"common.messagebox\" property to be set to true in io-package.json\n\t//  */\n\t// private onMessage(obj: ioBroker.Message): void {\n\t// \tif (typeof obj === 'object' && obj.message) {\n\t// \t\tif (obj.command === 'send') {\n\t// \t\t\t// e.g. send email or pushover or whatever\n\t// \t\t\tthis.log.info('send command');\n\n\t// \t\t\t// Send response in callback if required\n\t// \t\t\tif (obj.callback) this.sendTo(obj.from, obj.command, 'Message received', obj.callback);\n\t// \t\t}\n\t// \t}\n\t// }\n\n}\n\nif (require.main !== module) {\n\t// Export the constructor in compact mode\n\tmodule.exports = (options: Partial<utils.AdapterOptions> | undefined) => new Reolink810a(options);\n    // module.exports = (options : any) => new Reolink810a(options);\n} else {\n\t// otherwise start the instance directly\n\t(() => new Reolink810a())();\n}\n\n\n\n"],
  "mappings": "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",
  "names": []
}
