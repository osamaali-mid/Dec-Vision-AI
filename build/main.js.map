{
  "version": 3,
  "sources": ["../src/main.ts"],
  "sourcesContent": ["/*\n * Created with @iobroker/create-adapter v2.2.1\n */\n\n// The adapter-core module gives you access to the core ioBroker functions\n// you need to create an adapter\nimport * as utils from '@iobroker/adapter-core';\nimport axios from 'axios';\nimport * as https from 'https';\nimport { DetectionService, DetectionConfig, DetectionResult } from './lib/detection-service';\nimport { FileManager, FileUploadResult } from './lib/file-manager';\nimport { WebcamManager, WebcamDevice } from './lib/webcam-manager';\nimport * as path from 'path';\n\n// Load your modules here, e.g.:\n// import * as fs from \"fs\";\n\n\n\nclass Reolink810a extends utils.Adapter {\n\n    \n    private reolinkApiClient : any     = null;\n    private pollTimer        : any     = null;\n    private webcamOnline     : boolean = false;\n    private detectionService : DetectionService | null = null;\n    private fileManager      : FileManager | null = null;\n    private webcamManager    : WebcamManager | null = null;\n    \n\n    public constructor(options: Partial<utils.AdapterOptions> = {})\n    {\n        super({\n            ...options,\n            name: 'reolink-810a',\n        });\n\n\n        this.on('ready', this.onReady.bind(this));\n        this.on('stateChange', this.onStateChange.bind(this));\n        this.on('objectChange', this.onObjectChange.bind(this));\n        this.on('message', this.onMessage.bind(this));\n        this.on('unload', this.onUnload.bind(this));\n\n        // Initialize detection services\n        this.initializeDetectionServices();\n\t}\n    \n    /**\n     * Initialize detection services\n     */\n    private initializeDetectionServices(): void {\n        // Initialize detection service\n        const detectionConfig: DetectionConfig = {\n            enableImageDetection: true,\n            enableVideoDetection: true,\n            enableWebcamDetection: true,\n            detectionThreshold: 0.7,\n            maxFileSize: 100 // MB\n        };\n        \n        this.detectionService = new DetectionService(detectionConfig);\n        \n        // Initialize file manager\n        const uploadDir = path.join(__dirname, '..', 'uploads');\n        this.fileManager = new FileManager(uploadDir, 100 * 1024 * 1024); // 100MB\n        \n        // Initialize webcam manager\n        this.webcamManager = new WebcamManager();\n        \n        this.setupDetectionEventHandlers();\n    }\n\n    /**\n     * Setup event handlers for detection services\n     */\n    private setupDetectionEventHandlers(): void {\n        if (!this.detectionService || !this.fileManager || !this.webcamManager) return;\n\n        // Detection service events\n        this.detectionService.on('detectionComplete', (data) => {\n            this.log.info(`Detection completed for ${data.type}: ${data.results.length} objects detected`);\n            this.updateDetectionStates(data.results);\n        });\n\n        this.detectionService.on('webcamDetection', (data) => {\n            this.log.debug(`Webcam detection: ${data.results.length} objects detected`);\n            this.updateDetectionStates(data.results);\n        });\n\n        this.detectionService.on('error', (error) => {\n            this.log.error(`Detection service error: ${error}`);\n        });\n\n        // File manager events\n        this.fileManager.on('fileUploaded', (data) => {\n            this.log.info(`File uploaded: ${data.fileInfo.name}`);\n        });\n\n        this.fileManager.on('error', (error) => {\n            this.log.error(`File manager error: ${error}`);\n        });\n\n        // Webcam manager events\n        this.webcamManager.on('streamStarted', (data) => {\n            this.log.info(`Webcam stream started: ${data.deviceId}`);\n        });\n\n        this.webcamManager.on('streamStopped', (data) => {\n            this.log.info(`Webcam stream stopped: ${data.deviceId}`);\n        });\n\n        this.webcamManager.on('error', (data) => {\n            this.log.error(`Webcam manager error for device ${data.deviceId}: ${data.error}`);\n        });\n    }\n    \n    \n\n\t/**\n\t * Is called when databases are connected and adapter received configuration.\n\t */\n    private async onReady(): Promise<void>\n    {\n\n        if (!this.config.Hostname) {\n            this.log.error(\"Hostname / IP of webcam not (yet) set - please check Settings!\");\n            return;\n        }\n\n        if (!this.config.Username) {\n            this.log.error(\"Username not (yet) set - please check Settings!\");\n            return;\n        }\n\n        if (!this.config.Password) {\n            this.log.error(\"Password not (yet) set - please check Settings!\");\n            return;\n        }\n\n        if (!this.config.apiRefreshInterval) {\n            this.log.error(\"Refresh Interval for Motion Detection not (yet) set - please check Settings!\");\n            return;\n        }\n\n        if (!this.config.apiSleepAfterError) {\n            this.log.error(\"Sleep Interval (if webcam is offline) not (yet) set - please check Settings!\");\n            return;\n        }\n\n\n        this.reolinkApiClient = axios.create({\n            baseURL: `https://${this.config.Hostname}`,\n            timeout: 4000,\n            responseType: \"json\",\n            responseEncoding: \"binary\",\n            httpsAgent: new https.Agent({\n                rejectUnauthorized: false,\n            }),\n        });\n\n        await this.setObjectNotExistsAsync('Device', {\n            type: 'channel',\n            common: {\n                name: '',\n            },\n            native: {},\n        });\n\n        await this.setObjectNotExistsAsync('Device.Model', {\n            type: 'state',\n            common: {\n                name: '',\n                type: 'string',\n                role: 'value',\n                read: true,\n                write: false\n            },\n            native: {},\n        });\n\n        await this.setObjectNotExistsAsync('Device.BuildDay', {\n            type: 'state',\n            common: {\n                name: '',\n                type: 'string',\n                role: 'value',\n                read: true,\n                write: false\n            },\n            native: {},\n        });\n\n        await this.setObjectNotExistsAsync('Device.CfgVer', {\n            type: 'state',\n            common: {\n                name: '',\n                type: 'string',\n                role: 'value',\n                read: true,\n                write: false\n            },\n            native: {},\n        });\n\n        await this.setObjectNotExistsAsync('Device.Detail', {\n            type: 'state',\n            common: {\n                name: '',\n                type: 'string',\n                role: 'value',\n                read: true,\n                write: false\n            },\n            native: {},\n        });\n\n        await this.setObjectNotExistsAsync('Device.DiskNum', {\n            type: 'state',\n            common: {\n                name: '',\n                type: 'number',\n                role: 'value',\n                read: true,\n                write: false\n            },\n            native: {},\n        });\n\n        await this.setObjectNotExistsAsync('Device.FirmVer', {\n            type: 'state',\n            common: {\n                name: '',\n                type: 'string',\n                role: 'value',\n                read: true,\n                write: false\n            },\n            native: {},\n        });\n\n        await this.setObjectNotExistsAsync('Device.Name', {\n            type: 'state',\n            common: {\n                name: '',\n                type: 'string',\n                role: 'value',\n                read: true,\n                write: false\n            },\n            native: {},\n        });\n\n        await this.setObjectNotExistsAsync('Device.Serial', {\n            type: 'state',\n            common: {\n                name: '',\n                type: 'string',\n                role: 'value',\n                read: true,\n                write: false\n            },\n            native: {},\n        });\n\n        await this.setObjectNotExistsAsync('Device.Wifi', {\n            type: 'state',\n            common: {\n                name: '',\n                type: 'number',\n                role: 'value',\n                read: true,\n                write: false\n            },\n            native: {},\n        });\n\n        await this.setObjectNotExistsAsync('Network', {\n            type: 'channel',\n            common: {\n                name: '',\n            },\n            native: {},\n        });\n\n        await this.setObjectNotExistsAsync('Network.ActiveLink', {\n            type: 'state',\n            common: {\n                name: '',\n                type: 'string',\n                role: 'value',\n                read: true,\n                write: false\n            },\n            native: {},\n        });\n\n        await this.setObjectNotExistsAsync('Network.Connected', {\n            type: 'state',\n            common: {\n                name: '',\n                type: 'boolean',\n                role: 'value',\n                read: true,\n                write: false\n            },\n            native: {},\n        });\n\n        await this.setObjectNotExistsAsync('Network.DNS-Auto', {\n            type: 'state',\n            common: {\n                name: '',\n                type: 'number',\n                role: 'value',\n                read: true,\n                write: false\n            },\n            native: {},\n        });\n\n        await this.setObjectNotExistsAsync('Network.DNS-Server01', {\n            type: 'state',\n            common: {\n                name: '',\n                type: 'string',\n                role: 'value',\n                read: true,\n                write: false,\n                def: \"\"\n            },\n            native: {},\n        });\n\n        await this.setObjectNotExistsAsync('Network.DNS-Server02', {\n            type: 'state',\n            common: {\n                name: '',\n                type: 'string',\n                role: 'value',\n                read: true,\n                write: false,\n                def: \"\"\n            },\n            native: {},\n        });\n\n        await this.setObjectNotExistsAsync('Network.MAC', {\n            type: 'state',\n            common: {\n                name: '',\n                type: 'string',\n                role: 'value',\n                read: true,\n                write: false,\n                def: \"\"\n            },\n            native: {},\n        });\n\n        await this.setObjectNotExistsAsync('Network.Gateway', {\n            type: 'state',\n            common: {\n                name: '',\n                type: 'string',\n                role: 'value',\n                read: true,\n                write: false,\n                def: \"\"\n            },\n            native: {},\n        });\n\n        await this.setObjectNotExistsAsync('Network.IP', {\n            type: 'state',\n            common: {\n                name: '',\n                type: 'string',\n                role: 'value',\n                read: true,\n                write: false,\n                def: \"\"\n            },\n            native: {},\n        });\n\n        await this.setObjectNotExistsAsync('Network.Mask', {\n            type: 'state',\n            common: {\n                name: '',\n                type: 'string',\n                role: 'value',\n                read: true,\n                write: false,\n                def: \"\"\n            },\n            native: {},\n        });\n\n        await this.setObjectNotExistsAsync('Network.Type', {\n            type: 'state',\n            common: {\n                name: '',\n                type: 'string',\n                role: 'value',\n                read: true,\n                write: false,\n                def: \"\"\n            },\n            native: {},\n        });\n\n        await this.setObjectNotExistsAsync('Sensors', {\n            type: 'channel',\n            common: {\n                name: '',\n            },\n            native: {},\n        });\n\n        await this.setObjectNotExistsAsync('Sensors.MotionDetected', {\n            type: 'state',\n            common: {\n                name: '',\n                type: 'boolean',\n                role: 'value',\n                read: true,\n                write: false\n            },\n            native: {},\n        });\n\n        await this.setObjectNotExistsAsync('Sensors.DogCat', {\n            type: 'channel',\n            common: {\n                name: '',\n            },\n            native: {},\n        });\n\n        await this.setObjectNotExistsAsync('Sensors.DogCat.Detected', {\n            type: 'state',\n            common: {\n                name: '',\n                type: 'boolean',\n                role: 'value',\n                read: true,\n                write: false\n            },\n            native: {},\n        });\n\n        await this.setObjectNotExistsAsync('Sensors.DogCat.Supported', {\n            type: 'state',\n            common: {\n                name: '',\n                type: 'boolean',\n                role: 'value',\n                read: true,\n                write: false\n            },\n            native: {},\n        });\n\n        await this.setObjectNotExistsAsync('Sensors.Face', {\n            type: 'channel',\n            common: {\n                name: '',\n            },\n            native: {},\n        });\n\n        await this.setObjectNotExistsAsync('Sensors.Face.Detected', {\n            type: 'state',\n            common: {\n                name: '',\n                type: 'boolean',\n                role: 'value',\n                read: true,\n                write: false\n            },\n            native: {},\n        });\n\n        await this.setObjectNotExistsAsync('Sensors.Face.Supported', {\n            type: 'state',\n            common: {\n                name: '',\n                type: 'boolean',\n                role: 'value',\n                read: true,\n                write: false\n            },\n            native: {},\n        });\n\n        await this.setObjectNotExistsAsync('Sensors.People', {\n            type: 'channel',\n            common: {\n                name: '',\n            },\n            native: {},\n        });\n\n        await this.setObjectNotExistsAsync('Sensors.People.Detected', {\n            type: 'state',\n            common: {\n                name: '',\n                type: 'boolean',\n                role: 'value',\n                read: true,\n                write: false\n            },\n            native: {},\n        });\n\n        await this.setObjectNotExistsAsync('Sensors.People.Supported', {\n            type: 'state',\n            common: {\n                name: '',\n                type: 'boolean',\n                role: 'value',\n                read: true,\n                write: false\n            },\n            native: {},\n        });\n\n        await this.setObjectNotExistsAsync('Sensors.Vehicle', {\n            type: 'channel',\n            common: {\n                name: '',\n            },\n            native: {},\n        });\n\n        await this.setObjectNotExistsAsync('Sensors.Vehicle.Detected', {\n            type: 'state',\n            common: {\n                name: '',\n                type: 'boolean',\n                role: 'value',\n                read: true,\n                write: false\n            },\n            native: {},\n        });\n\n        await this.setObjectNotExistsAsync('Sensors.Vehicle.Supported', {\n            type: 'state',\n            common: {\n                name: '',\n                type: 'boolean',\n                role: 'value',\n                read: true,\n                write: false\n            },\n            native: {},\n        });\n\n        // Detection service states\n        await this.setObjectNotExistsAsync('Detection', {\n            type: 'channel',\n            common: {\n                name: 'Detection Services',\n            },\n            native: {},\n        });\n\n        await this.setObjectNotExistsAsync('Detection.ImageDetection', {\n            type: 'state',\n            common: {\n                name: 'Image Detection Enabled',\n                type: 'boolean',\n                role: 'switch',\n                read: true,\n                write: true,\n                def: true\n            },\n            native: {},\n        });\n\n        await this.setObjectNotExistsAsync('Detection.VideoDetection', {\n            type: 'state',\n            common: {\n                name: 'Video Detection Enabled',\n                type: 'boolean',\n                role: 'switch',\n                read: true,\n                write: true,\n                def: true\n            },\n            native: {},\n        });\n\n        await this.setObjectNotExistsAsync('Detection.WebcamDetection', {\n            type: 'state',\n            common: {\n                name: 'Webcam Detection Enabled',\n                type: 'boolean',\n                role: 'switch',\n                read: true,\n                write: true,\n                def: true\n            },\n            native: {},\n        });\n\n        await this.setObjectNotExistsAsync('Detection.LastDetectionTime', {\n            type: 'state',\n            common: {\n                name: 'Last Detection Time',\n                type: 'string',\n                role: 'value.time',\n                read: true,\n                write: false\n            },\n            native: {},\n        });\n\n        await this.setObjectNotExistsAsync('Detection.DetectionCount', {\n            type: 'state',\n            common: {\n                name: 'Total Detection Count',\n                type: 'number',\n                role: 'value',\n                read: true,\n                write: false,\n                def: 0\n            },\n            native: {},\n        });\n\n        // File upload states\n        await this.setObjectNotExistsAsync('FileUpload', {\n            type: 'channel',\n            common: {\n                name: 'File Upload',\n            },\n            native: {},\n        });\n\n        await this.setObjectNotExistsAsync('FileUpload.LastUploadedFile', {\n            type: 'state',\n            common: {\n                name: 'Last Uploaded File',\n                type: 'string',\n                role: 'value',\n                read: true,\n                write: false\n            },\n            native: {},\n        });\n\n        await this.setObjectNotExistsAsync('FileUpload.UploadCount', {\n            type: 'state',\n            common: {\n                name: 'Upload Count',\n                type: 'number',\n                role: 'value',\n                read: true,\n                write: false,\n                def: 0\n            },\n            native: {},\n        });\n\n        // Webcam states\n        await this.setObjectNotExistsAsync('Webcam', {\n            type: 'channel',\n            common: {\n                name: 'Webcam Management',\n            },\n            native: {},\n        });\n\n        await this.setObjectNotExistsAsync('Webcam.ActiveStreams', {\n            type: 'state',\n            common: {\n                name: 'Active Streams Count',\n                type: 'number',\n                role: 'value',\n                read: true,\n                write: false,\n                def: 0\n            },\n            native: {},\n        });\n\n        await this.setObjectNotExistsAsync('Webcam.AvailableDevices', {\n            type: 'state',\n            common: {\n                name: 'Available Devices',\n                type: 'string',\n                role: 'json',\n                read: true,\n                write: false\n            },\n            native: {},\n        });\n\n        this.announceOffline();\n\n        \n\t}\n\n\n\n    async pollSensors(classInstance:any)\n    {\n        if (classInstance.config.PollMD)\n            classInstance.getMdState();\n        if (classInstance.config.PollAI)\n            classInstance.getAiState();\n    }\n\n    async checkConnection(classInstance:any)\n    {\n        classInstance.getLocalLink();\n    }\n\n\n    async announceOffline()\n    {\n        if (this.webcamOnline || this.pollTimer === null)\n        {\n            this.webcamOnline = false;\n            clearInterval(this.pollTimer);\n            this.pollTimer = this.setInterval(this.checkConnection, this.config.apiSleepAfterError * 1000, this);\n        }\n        await this.setStateAsync('info.connection',   {val: false, ack: true});\n        await this.setStateAsync(\"Network.Connected\", {val: false, ack: true});\n    }\n\n    async announceOnline()\n    {\n        if (!this.webcamOnline)\n        {\n            this.webcamOnline = true;\n            clearInterval(this.pollTimer);\n            this.pollTimer = this.setInterval(this.pollSensors, this.config.apiRefreshInterval, this);\n            this.getDevinfo();\n            this.getLocalLink();\n        }\n        await this.setStateAsync('info.connection',   {val: true, ack: true});\n        await this.setStateAsync(\"Network.Connected\", {val: true, ack: true});\n    }\n\n\n    async getDevinfo()\n    {\n        if (this.reolinkApiClient)\n        {\n            try\n            {\n                const DevInfoValues = await this.reolinkApiClient.get(`/api.cgi?cmd=GetDevInfo&channel=0&user=${this.config.Username}&password=${this.config.Password}`);\n                // this.log.debug(`camMdStateInfo ${JSON.stringify(DevInfoValues.status)}: ${JSON.stringify(DevInfoValues.data)}`);\n\n                if(DevInfoValues.status === 200)\n                {\n                    this.announceOnline();\n                    const DevValues = DevInfoValues.data[0];\n                    await this.setStateAsync(\"Device.BuildDay\", {val: DevValues.value.DevInfo.buildDay, ack: true});\n                    await this.setStateAsync(\"Device.CfgVer\",   {val: DevValues.value.DevInfo.cfgVer,   ack: true});\n                    await this.setStateAsync(\"Device.Detail\",   {val: DevValues.value.DevInfo.detail,   ack: true});\n                    await this.setStateAsync(\"Device.DiskNum\",  {val: DevValues.value.DevInfo.diskNum,  ack: true});\n                    await this.setStateAsync(\"Device.FirmVer\",  {val: DevValues.value.DevInfo.firmVer,  ack: true});\n                    await this.setStateAsync(\"Device.Model\",    {val: DevValues.value.DevInfo.model,    ack: true});\n                    await this.setStateAsync(\"Device.Name\",     {val: DevValues.value.DevInfo.name,     ack: true});\n                    await this.setStateAsync(\"Device.Serial\",   {val: DevValues.value.DevInfo.serial,   ack: true});\n                    await this.setStateAsync(\"Device.Wifi\",     {val: DevValues.value.DevInfo.wifi,     ack: true});\n                }\n\n            } catch (error:any)\n            {\n                this.announceOffline();\n                this.log.error('Unable to retrieve DeviceInfo from Webcam [' + this.config.Hostname + ']: ' + error);\n            }\n        }\n    }\n\n\n    async getLocalLink()\n    {\n        if (this.reolinkApiClient)\n        {\n            try\n            {\n                const LinkInfoValues = await this.reolinkApiClient.get(`/api.cgi?cmd=GetLocalLink&channel=0&user=${this.config.Username}&password=${this.config.Password}`);\n                // this.log.debug(`LinkInfoValues ${JSON.stringify(LinkInfoValues.status)}: ${JSON.stringify(LinkInfoValues.data)}`);\n\n                if(LinkInfoValues.status === 200)\n                {\n                    this.announceOnline();\n                    const LinkValues = LinkInfoValues.data[0];\n                    await this.setStateAsync(\"Network.ActiveLink\",   {val: LinkValues.value.LocalLink.activeLink,     ack: true});\n                    await this.setStateAsync(\"Network.DNS-Auto\",     {val: LinkValues.value.LocalLink.dns.auto,       ack: true});\n                    await this.setStateAsync(\"Network.DNS-Server01\", {val: LinkValues.value.LocalLink.dns.dns1,       ack: true});\n                    await this.setStateAsync(\"Network.DNS-Server02\", {val: LinkValues.value.LocalLink.dns.dns2,       ack: true});\n                    await this.setStateAsync(\"Network.MAC\",          {val: LinkValues.value.LocalLink.mac,            ack: true});\n                    await this.setStateAsync(\"Network.Gateway\",      {val: LinkValues.value.LocalLink.static.gateway, ack: true});\n                    await this.setStateAsync(\"Network.IP\",           {val: LinkValues.value.LocalLink.static.ip,      ack: true});\n                    await this.setStateAsync(\"Network.Mask\",         {val: LinkValues.value.LocalLink.static.mask,    ack: true});\n                    await this.setStateAsync(\"Network.Type\",         {val: LinkValues.value.LocalLink.type,           ack: true});\n                }\n            } catch (error:any)\n            {\n                this.announceOffline();\n                this.log.error('Unable to retrieve NetworkInfo from from Webcam [' + this.config.Hostname + ']: ' + error);\n            }\n        }\n    }\n\n\n\n\n\n\n\n    async getMdState()\n    {\n        if (this.reolinkApiClient && this.config.PollMD)\n        {\n            try\n            {\n                const MdInfoValues = await this.reolinkApiClient.get(`/api.cgi?cmd=GetMdState&channel=0&user=${this.config.Username}&password=${this.config.Password}`);\n                // this.log.debug(`camMdStateInfo ${JSON.stringify(MdInfoValues.status)}: ${JSON.stringify(MdInfoValues.data)}`);\n\n                if(MdInfoValues.status === 200)\n                {\n                    this.announceOnline();\n                    const MdValues = MdInfoValues.data[0];\n                    await this.setStateAsync(\"Sensors.MotionDetected\", {val: MdValues.value.state === 1, ack: true});\n                }\n            } catch (error:any)\n            {\n                this.announceOffline();\n                this.log.error('Unable to retrieve State of MotionDetection Sensor from from Webcam [' + this.config.Hostname + ']: ' + error);\n            }\n        }\n    }\n\n\n\n\n\n    async getAiState()\n    {\n        if (this.reolinkApiClient && this.config.PollAI)\n        {\n            try\n            {\n                const AiInfoValues = await this.reolinkApiClient.get(`/api.cgi?cmd=GetAiState&channel=0&user=${this.config.Username}&password=${this.config.Password}`);\n                // this.log.debug(`camAiStateInfo ${JSON.stringify(AiInfoValues.status)}: ${JSON.stringify(AiInfoValues.data)}`);\n\n                if(AiInfoValues.status === 200)\n                {\n                    this.announceOnline();\n                    const AiValues = AiInfoValues.data[0];\n                    await this.setStateAsync(\"Sensors.DogCat.Detected\",   {val: AiValues.value.dog_cat.alarm_state === 1, ack: true});\n                    await this.setStateAsync(\"Sensors.DogCat.Supported\",  {val: AiValues.value.dog_cat.support     === 1, ack: true});\n                    await this.setStateAsync(\"Sensors.Face.Detected\",     {val: AiValues.value.face.alarm_state    === 1, ack: true});\n                    await this.setStateAsync(\"Sensors.Face.Supported\",    {val: AiValues.value.face.support        === 1, ack: true});\n                    await this.setStateAsync(\"Sensors.People.Detected\",   {val: AiValues.value.people.alarm_state  === 1, ack: true});\n                    await this.setStateAsync(\"Sensors.People.Supported\",  {val: AiValues.value.people.support      === 1, ack: true});\n                    await this.setStateAsync(\"Sensors.Vehicle.Detected\",  {val: AiValues.value.vehicle.alarm_state === 1, ack: true});\n                    await this.setStateAsync(\"Sensors.Vehicle.Supported\", {val: AiValues.value.vehicle.support     === 1, ack: true});\n                }\n            } catch (error:any)\n            {\n                this.announceOffline();\n                this.log.error('Unable to retrieve State of AI-Detection Sensor from from Webcam [' + this.config.Hostname + ']: ' + error);\n            }\n        }\n    }\n\n    /**\n     * Update detection states based on results\n     */\n    private async updateDetectionStates(results: DetectionResult[]): Promise<void> {\n        if (results.length > 0) {\n            await this.setStateAsync('Detection.LastDetectionTime', { \n                val: new Date().toISOString(), \n                ack: true \n            });\n\n            // Update detection count\n            const currentCount = await this.getStateAsync('Detection.DetectionCount');\n            const newCount = (currentCount?.val as number || 0) + results.length;\n            await this.setStateAsync('Detection.DetectionCount', { \n                val: newCount, \n                ack: true \n            });\n\n            // Update specific sensor states based on detection results\n            for (const result of results) {\n                switch (result.type) {\n                    case 'motion':\n                        await this.setStateAsync('Sensors.MotionDetected', { \n                            val: true, \n                            ack: true \n                        });\n                        break;\n                    case 'person':\n                        await this.setStateAsync('Sensors.People.Detected', { \n                            val: true, \n                            ack: true \n                        });\n                        break;\n                    case 'vehicle':\n                        await this.setStateAsync('Sensors.Vehicle.Detected', { \n                            val: true, \n                            ack: true \n                        });\n                        break;\n                    case 'face':\n                        await this.setStateAsync('Sensors.Face.Detected', { \n                            val: true, \n                            ack: true \n                        });\n                        break;\n                    case 'dog_cat':\n                        await this.setStateAsync('Sensors.DogCat.Detected', { \n                            val: true, \n                            ack: true \n                        });\n                        break;\n                }\n            }\n        }\n    }\n\n    \n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\t/**\n\t * Is called when adapter shuts down - callback has to be called under any circumstances!\n\t */\n\tprivate onUnload(callback: () => void): void\n    {\n\t\ttry\n        {\n            this.announceOffline();\n            clearInterval(this.pollTimer);\n            \n            // Cleanup detection services\n            if (this.detectionService) {\n                this.detectionService.stopWebcamDetection();\n            }\n            \n            if (this.webcamManager) {\n                this.webcamManager.cleanup();\n            }\n            \n\t\t\tcallback();\n\t\t} catch (e) {\n\t\t\tcallback();\n\t\t}\n\t}\n\n\t// If you need to react to object changes, uncomment the following block and the corresponding line in the constructor.\n\t// You also need to subscribe to the objects with `this.subscribeObjects`, similar to `this.subscribeStates`.\n\t// /**\n\t//  * Is called if a subscribed object changes\n\t//  */\n\tprivate onObjectChange(id: string, obj: ioBroker.Object | null | undefined): void {\n\t\tif (obj) {\n\t\t\t// The object was changed\n\t\t\tthis.log.info(`object ${id} changed: ${JSON.stringify(obj)}`);\n\t\t} else {\n\t\t\t// The object was deleted\n\t\t\tthis.log.info(`object ${id} deleted`);\n\t\t}\n\t}\n\n\t/**\n\t * Is called if a subscribed state changes\n\t */\n\tprivate onStateChange(id: string, state: ioBroker.State | null | undefined): void {\n\t\tif (state) {\n\t\t\t// The state was changed\n\t\t\tthis.log.info(`state ${id} changed: ${state.val} (ack = ${state.ack})`);\n\t\t} else {\n\t\t\t// The state was deleted\n\t\t\tthis.log.info(`state ${id} deleted`);\n\t\t}\n\t}\n\n\t// If you need to accept messages in your adapter, uncomment the following block and the corresponding line in the constructor.\n\t// /**\n\t//  * Some message was sent to this instance over message box. Used by email, pushover, text2speech, ...\n\t//  * Using this method requires \"common.messagebox\" property to be set to true in io-package.json\n\t//  */\n\tprivate onMessage(obj: ioBroker.Message): void {\n\t\tif (typeof obj === 'object' && obj.message) {\n\t\t\tswitch (obj.command) {\n                case 'uploadFile':\n                    this.handleFileUpload(obj);\n                    break;\n                case 'processImage':\n                    this.handleImageProcessing(obj);\n                    break;\n                case 'processVideo':\n                    this.handleVideoProcessing(obj);\n                    break;\n                case 'startWebcamDetection':\n                    this.handleWebcamDetection(obj);\n                    break;\n                case 'stopWebcamDetection':\n                    this.handleStopWebcamDetection(obj);\n                    break;\n                case 'getWebcamDevices':\n                    this.handleGetWebcamDevices(obj);\n                    break;\n                case 'getUploadedFiles':\n                    this.handleGetUploadedFiles(obj);\n                    break;\n                default:\n                    if (obj.command === 'send') {\n                        this.log.info('send command');\n                        if (obj.callback) {\n                            this.sendTo(obj.from, obj.command, 'Message received', obj.callback);\n                        }\n                    }\n                    break;\n            }\n\t\t}\n\t}\n\n    /**\n     * Handle file upload message\n     */\n    private async handleFileUpload(obj: ioBroker.Message): Promise<void> {\n        try {\n            if (!this.fileManager) {\n                throw new Error('File manager not initialized');\n            }\n\n            const { fileName, fileData } = obj.message as { fileName: string; fileData: string };\n            const fileBuffer = Buffer.from(fileData, 'base64');\n            \n            const result = await this.fileManager.saveFile(fileName, fileBuffer);\n            \n            if (result.success && result.fileInfo) {\n                await this.setStateAsync('FileUpload.LastUploadedFile', { \n                    val: result.fileInfo.name, \n                    ack: true \n                });\n                \n                const currentCount = await this.getStateAsync('FileUpload.UploadCount');\n                const newCount = (currentCount?.val as number || 0) + 1;\n                await this.setStateAsync('FileUpload.UploadCount', { \n                    val: newCount, \n                    ack: true \n                });\n            }\n\n            if (obj.callback) {\n                this.sendTo(obj.from, obj.command, result, obj.callback);\n            }\n        } catch (error) {\n            const errorResult = {\n                success: false,\n                error: error instanceof Error ? error.message : 'Unknown error'\n            };\n            \n            if (obj.callback) {\n                this.sendTo(obj.from, obj.command, errorResult, obj.callback);\n            }\n        }\n    }\n\n    /**\n     * Handle image processing message\n     */\n    private async handleImageProcessing(obj: ioBroker.Message): Promise<void> {\n        try {\n            if (!this.detectionService) {\n                throw new Error('Detection service not initialized');\n            }\n\n            const { imagePath } = obj.message as { imagePath: string };\n            const results = await this.detectionService.processImage(imagePath);\n            \n            if (obj.callback) {\n                this.sendTo(obj.from, obj.command, { success: true, results }, obj.callback);\n            }\n        } catch (error) {\n            const errorResult = {\n                success: false,\n                error: error instanceof Error ? error.message : 'Unknown error'\n            };\n            \n            if (obj.callback) {\n                this.sendTo(obj.from, obj.command, errorResult, obj.callback);\n            }\n        }\n    }\n\n    /**\n     * Handle video processing message\n     */\n    private async handleVideoProcessing(obj: ioBroker.Message): Promise<void> {\n        try {\n            if (!this.detectionService) {\n                throw new Error('Detection service not initialized');\n            }\n\n            const { videoPath } = obj.message as { videoPath: string };\n            const results = await this.detectionService.processVideo(videoPath);\n            \n            if (obj.callback) {\n                this.sendTo(obj.from, obj.command, { success: true, results }, obj.callback);\n            }\n        } catch (error) {\n            const errorResult = {\n                success: false,\n                error: error instanceof Error ? error.message : 'Unknown error'\n            };\n            \n            if (obj.callback) {\n                this.sendTo(obj.from, obj.command, errorResult, obj.callback);\n            }\n        }\n    }\n\n    /**\n     * Handle webcam detection start message\n     */\n    private async handleWebcamDetection(obj: ioBroker.Message): Promise<void> {\n        try {\n            if (!this.detectionService || !this.webcamManager) {\n                throw new Error('Detection services not initialized');\n            }\n\n            const { deviceId } = obj.message as { deviceId?: string };\n            \n            // Start webcam stream\n            await this.webcamManager.startStream(deviceId || '0');\n            \n            // Start detection\n            await this.detectionService.startWebcamDetection(deviceId);\n            \n            // Update active streams count\n            const activeStreams = this.webcamManager.getActiveStreams();\n            await this.setStateAsync('Webcam.ActiveStreams', { \n                val: activeStreams.length, \n                ack: true \n            });\n            \n            if (obj.callback) {\n                this.sendTo(obj.from, obj.command, { success: true }, obj.callback);\n            }\n        } catch (error) {\n            const errorResult = {\n                success: false,\n                error: error instanceof Error ? error.message : 'Unknown error'\n            };\n            \n            if (obj.callback) {\n                this.sendTo(obj.from, obj.command, errorResult, obj.callback);\n            }\n        }\n    }\n\n    /**\n     * Handle webcam detection stop message\n     */\n    private async handleStopWebcamDetection(obj: ioBroker.Message): Promise<void> {\n        try {\n            if (!this.detectionService || !this.webcamManager) {\n                throw new Error('Detection services not initialized');\n            }\n\n            const { deviceId } = obj.message as { deviceId?: string };\n            \n            // Stop detection\n            this.detectionService.stopWebcamDetection();\n            \n            // Stop webcam stream\n            if (deviceId) {\n                await this.webcamManager.stopStream(deviceId);\n            } else {\n                await this.webcamManager.stopAllStreams();\n            }\n            \n            // Update active streams count\n            const activeStreams = this.webcamManager.getActiveStreams();\n            await this.setStateAsync('Webcam.ActiveStreams', { \n                val: activeStreams.length, \n                ack: true \n            });\n            \n            if (obj.callback) {\n                this.sendTo(obj.from, obj.command, { success: true }, obj.callback);\n            }\n        } catch (error) {\n            const errorResult = {\n                success: false,\n                error: error instanceof Error ? error.message : 'Unknown error'\n            };\n            \n            if (obj.callback) {\n                this.sendTo(obj.from, obj.command, errorResult, obj.callback);\n            }\n        }\n    }\n\n    /**\n     * Handle get webcam devices message\n     */\n    private async handleGetWebcamDevices(obj: ioBroker.Message): Promise<void> {\n        try {\n            if (!this.webcamManager) {\n                throw new Error('Webcam manager not initialized');\n            }\n\n            const devices = await this.webcamManager.getAvailableDevices();\n            \n            // Update available devices state\n            await this.setStateAsync('Webcam.AvailableDevices', { \n                val: JSON.stringify(devices), \n                ack: true \n            });\n            \n            if (obj.callback) {\n                this.sendTo(obj.from, obj.command, { success: true, devices }, obj.callback);\n            }\n        } catch (error) {\n            const errorResult = {\n                success: false,\n                error: error instanceof Error ? error.message : 'Unknown error'\n            };\n            \n            if (obj.callback) {\n                this.sendTo(obj.from, obj.command, errorResult, obj.callback);\n            }\n        }\n    }\n\n    /**\n     * Handle get uploaded files message\n     */\n    private async handleGetUploadedFiles(obj: ioBroker.Message): Promise<void> {\n        try {\n            if (!this.fileManager) {\n                throw new Error('File manager not initialized');\n            }\n\n            const files = await this.fileManager.getUploadedFiles();\n            \n            if (obj.callback) {\n                this.sendTo(obj.from, obj.command, { success: true, files }, obj.callback);\n            }\n        } catch (error) {\n            const errorResult = {\n                success: false,\n                error: error instanceof Error ? error.message : 'Unknown error'\n            };\n            \n            if (obj.callback) {\n                this.sendTo(obj.from, obj.command, errorResult, obj.callback);\n            }\n        }\n    }\n\n}\n\nif (require.main !== module) {\n\t// Export the constructor in compact mode\n\tmodule.exports = (options: Partial<utils.AdapterOptions> | undefined) => new Reolink810a(options);\n} else {\n\t// otherwise start the instance directly\n\t(() => new Reolink810a())();\n}"],
  "mappings": "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",
  "names": ["axios"]
}
